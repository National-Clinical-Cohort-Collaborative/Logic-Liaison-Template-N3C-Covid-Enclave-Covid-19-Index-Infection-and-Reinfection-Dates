#* infection_dates:
#*   desc: creates table with all infection and reinfection dates for confirmed COVID
#*     cohort
#*   ext: py
#*   inputs:
#*   - covid_cohort
#*   - Logic_Liaison_All_patients_fact_day_table_lds
#* 

def infection_dates(covid_cohort,  Logic_Liaison_All_patients_fact_day_table_lds):
   
        
    all_patients_visit_table = Logic_Liaison_All_patients_fact_day_table_lds.select('person_id', 'date', 'PCR_AG_Pos')

    cohort_df = covid_cohort.select('person_id', 'COVID_first_poslab_or_diagnosis_date')

    # Label index infection as 0
    index_infection_df = cohort_df.withColumnRenamed('COVID_first_poslab_or_diagnosis_date', 'infection_date') \
        .withColumn('infection_number', F.lit(0)) \
        .select('person_id', 'infection_date', 'infection_number')

    ##################################
    # Find Eligible Reinfection Dates
    ##################################

    reinfection_day_threshold = 60
        
    # Get all positive test dates
    positives_df = all_patients_visit_table \
        .where(F.col("PCR_AG_Pos") == 1)
    print("Got all positive test dates")

    # Limit to persons in COHORT
    positives_df = cohort_df.join(positives_df, how='left', on='person_id')

    # Calculate date difference with earliest diagnosis (not always PCR_AG_Pos)
    reinfection_df = positives_df.withColumn("days_postest_from_diagnosis", F.datediff(F.col("date"), \
    F.col("COVID_first_poslab_or_diagnosis_date"))) \
    .where(F.col("days_postest_from_diagnosis") > reinfection_day_threshold)

    w = Window.partitionBy('person_id')
    reinfection_df = reinfection_df.select('person_id', 'date').withColumn('infection_date', \
                    F.min('date').over(w))
    reinfection_df = reinfection_df.withColumn('infection_number', F.lit(1))

    # Join index infection with first reinfection
    r_df = reinfection_df.select('person_id', 'infection_date', 'infection_number') \
        .union(index_infection_df)

    print("Calculated First Reinfection")

    # Loop over new reinfection dates and find new reinfections (only PCR_AG_Pos)  
    onward = True
    i = 2
    while onward:
        print("Calcuted Reinfection " + str(i))
        reinfection_df = positives_df.join(r_df \
        .where(F.col("infection_number") == (i - 1)), on='person_id', how='left')

        # Calculate date difference with previous reinfection
        reinfection_df = reinfection_df.withColumn("days_postest_from_reinfection", F.datediff(F.col("date"), \
        F.col("infection_date"))) \
        .where(F.col("days_postest_from_reinfection") > reinfection_day_threshold)

        # End loop when no more eligible refinfections
        if not reinfection_df.count() > 0:
            break

        w = Window.partitionBy('person_id')
        reinfection_df = reinfection_df.select('person_id', 'date').withColumn('infection_date', \
                                                F.min('date').over(w))
        reinfection_df = reinfection_df.withColumn('infection_number', F.lit(i))
        
        r_df = r_df.union(reinfection_df.select('person_id', 'infection_date', 'infection_number')).drop_duplicates()
        i += 1
    
    print("Completed Calculation of Subsequent Reinfections")

    return r_df

#################################################
## Global imports and functions included below ##
#################################################
from pyspark.sql import functions as F
from pyspark.sql import Window
